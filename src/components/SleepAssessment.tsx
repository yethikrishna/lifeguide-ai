import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Slider } from '@/components/ui/slider';
import { Checkbox } from '@/components/ui/checkbox';
import { Badge } from '@/components/ui/badge';
import { Moon, Clock, Star, Volume2 } from 'lucide-react';
import { enhancedAPI } from '@/services/enhancedAPI';

interface SleepData {
  hours: number;
  quality: number;
  bedtime: string;
  issues: string[];
}

export function SleepAssessment() {
  const [sleepData, setSleepData] = useState<SleepData>({
    hours: 7,
    quality: 7,
    bedtime: '22:00',
    issues: []
  });
  
  const [results, setResults] = useState<any>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [audioUrl, setAudioUrl] = useState<string>('');

  const sleepIssues = [
    'Difficulty falling asleep',
    'Frequent wake-ups',
    'Early morning awakening',
    'Restless sleep',
    'Snoring',
    'Sleep apnea',
    'Nightmares',
    'Stress/anxiety',
    'Environmental noise',
    'Uncomfortable bed/pillow'
  ];

  const handleIssueChange = (issue: string, checked: boolean) => {
    setSleepData(prev => ({
      ...prev,
      issues: checked 
        ? [...prev.issues, issue]
        : prev.issues.filter(i => i !== issue)
    }));
  };

  const generateSleepAdvice = async () => {
    setIsLoading(true);
    try {
      // Use enhanced Modal.com sleep analysis with $280 credits
      const advice = await enhancedAPI.getEnhancedSleepAdvice({
        ...sleepData,
        lifestyle_factors: ['regular_exercise'] // Add any lifestyle factors
      });
      setResults(advice);
      
      // Set meditation audio if generated by Modal.com
      if (advice.meditation_audio) {
        setAudioUrl(advice.meditation_audio);
      }
    } catch (error) {
      console.error('Sleep assessment error:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const getSleepScoreColor = (score: number) => {
    if (score >= 80) return 'text-green-600 bg-green-100';
    if (score >= 60) return 'text-yellow-600 bg-yellow-100';
    return 'text-red-600 bg-red-100';
  };

  const getSleepScoreDescription = (score: number) => {
    if (score >= 80) return 'Excellent Sleep';
    if (score >= 60) return 'Good Sleep';
    return 'Sleep Needs Improvement';
  };

  return (
    <div className="max-w-4xl mx-auto space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Moon className="w-6 h-6 text-purple-600" />
            Sleep Quality Assessment
          </CardTitle>
          <p className="text-gray-600">
            Get personalized sleep coaching and optimization recommendations
          </p>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Sleep Hours */}
          <div className="space-y-2">
            <Label>How many hours did you sleep last night?</Label>
            <div className="flex items-center space-x-4">
              <Slider
                value={[sleepData.hours]}
                onValueChange={(value) => setSleepData(prev => ({ ...prev, hours: value[0] }))}
                max={12}
                min={1}
                step={0.5}
                className="flex-1"
              />
              <Badge variant="outline" className="min-w-[60px]">
                {sleepData.hours} hrs
              </Badge>
            </div>
          </div>

          {/* Sleep Quality */}
          <div className="space-y-2">
            <Label>How would you rate your sleep quality? (1-10)</Label>
            <div className="flex items-center space-x-4">
              <Slider
                value={[sleepData.quality]}
                onValueChange={(value) => setSleepData(prev => ({ ...prev, quality: value[0] }))}
                max={10}
                min={1}
                step={1}
                className="flex-1"
              />
              <Badge variant="outline" className="min-w-[60px]">
                {sleepData.quality}/10
              </Badge>
            </div>
          </div>

          {/* Bedtime */}
          <div className="space-y-2">
            <Label htmlFor="bedtime">What time did you go to bed?</Label>
            <div className="flex items-center space-x-2">
              <Clock className="w-4 h-4 text-gray-400" />
              <Input
                id="bedtime"
                type="time"
                value={sleepData.bedtime}
                onChange={(e) => setSleepData(prev => ({ ...prev, bedtime: e.target.value }))}
                className="w-32"
              />
            </div>
          </div>

          {/* Sleep Issues */}
          <div className="space-y-3">
            <Label>What sleep issues did you experience? (Select all that apply)</Label>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              {sleepIssues.map((issue) => (
                <div key={issue} className="flex items-center space-x-2">
                  <Checkbox
                    id={issue}
                    checked={sleepData.issues.includes(issue)}
                    onCheckedChange={(checked) => 
                      handleIssueChange(issue, checked as boolean)
                    }
                  />
                  <Label htmlFor={issue} className="text-sm font-normal cursor-pointer">
                    {issue}
                  </Label>
                </div>
              ))}
            </div>
          </div>

          <Button 
            onClick={generateSleepAdvice} 
            disabled={isLoading}
            className="w-full"
          >
            {isLoading ? 'Analyzing your sleep...' : 'Get Sleep Coaching'}
          </Button>
        </CardContent>
      </Card>

      {/* Results */}
      {results && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Star className="w-6 h-6 text-yellow-500" />
              Your Sleep Analysis
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* Sleep Score */}
            <div className="text-center">
              <div className={`inline-flex items-center px-4 py-2 rounded-full text-2xl font-bold ${getSleepScoreColor(results.sleepScore)}`}>
                {results.sleepScore}/100
              </div>
              <p className="text-lg font-medium mt-2">
                {getSleepScoreDescription(results.sleepScore)}
              </p>
            </div>

            {/* Analysis */}
            <div className="bg-blue-50 p-4 rounded-lg">
              <div className="flex items-center justify-between mb-2">
                <h3 className="font-semibold text-blue-900">Sleep Analysis</h3>
                {results.modal_enhanced && (
                  <Badge className="bg-purple-100 text-purple-800">
                    ✨ Modal.com Enhanced
                  </Badge>
                )}
              </div>
              <p className="text-blue-800 whitespace-pre-wrap">{results.analysis}</p>
              {results.circadian_insights && (
                <div className="mt-3 p-3 bg-blue-100 rounded">
                  <h4 className="font-medium text-blue-900 mb-1">Circadian Insights</h4>
                  <p className="text-blue-800 text-sm">{results.circadian_insights}</p>
                </div>
              )}
            </div>

            {/* Recommendations */}
            {results.recommendations.length > 0 && (
              <div>
                <h3 className="font-semibold mb-3">Personalized Recommendations</h3>
                <div className="space-y-2">
                  {results.recommendations.map((rec: string, index: number) => (
                    <div key={index} className="flex items-start gap-2 p-3 bg-gray-50 rounded-lg">
                      <div className="w-2 h-2 bg-purple-500 rounded-full mt-2 flex-shrink-0" />
                      <p className="text-sm">{rec}</p>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Meditation Audio */}
            {audioUrl && (
              <div className="bg-purple-50 p-4 rounded-lg">
                <h3 className="font-semibold text-purple-900 mb-2 flex items-center gap-2">
                  <Volume2 className="w-4 h-4" />
                  Personalized Sleep Meditation
                </h3>
                <p className="text-purple-800 text-sm mb-3">
                  Since your sleep quality could be improved, I've generated a personalized meditation to help you relax.
                </p>
                <audio controls className="w-full">
                  <source src={audioUrl} type="audio/mpeg" />
                  Your browser does not support the audio element.
                </audio>
              </div>
            )}
          </CardContent>
        </Card>
      )}

      {/* Tips Card */}
      <Card>
        <CardContent className="p-4">
          <div className="flex items-start gap-3">
            <Moon className="w-5 h-5 text-purple-500 mt-0.5" />
            <div>
              <h3 className="font-medium text-gray-900">Sleep Hygiene Tips</h3>
              <ul className="text-sm text-gray-600 mt-1 space-y-1">
                <li>• Maintain a consistent sleep schedule</li>
                <li>• Create a cool, dark, and quiet sleeping environment</li>
                <li>• Avoid screens 1 hour before bedtime</li>
                <li>• Limit caffeine intake after 2 PM</li>
                <li>• Practice relaxation techniques before bed</li>
              </ul>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}